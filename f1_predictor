{
  "metadata": {
    "kernelspec": {
      "language": "python",
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python",
      "version": "3.11.13",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "kaggle": {
      "accelerator": "nvidiaTeslaT4",
      "dataSources": [],
      "dockerImageVersionId": 31090,
      "isInternetEnabled": true,
      "language": "python",
      "sourceType": "notebook",
      "isGpuEnabled": true
    },
    "colab": {
      "name": "f1_predictor.ipynb",
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat_minor": 0,
  "nbformat": 4,
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/KritikMahesh/F1-Strategy-Predictor/blob/main/f1_predictor\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 🏎️ Advanced F1 Race Predictor - Kaggle Edition\n",
        "## Comprehensive Formula 1 Analysis & Prediction System\n",
        "\n",
        "This notebook provides advanced F1 race analysis with interactive functions, circuit graphics, and comprehensive prediction models."
      ],
      "metadata": {
        "id": "zHM0xo5K6Yrw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Import required libraries\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import mean_squared_error, mean_absolute_error\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')\n",
        "\n",
        "# Set style\n",
        "plt.style.use('default')\n",
        "sns.set_palette(\"husl\")\n",
        "plt.rcParams['figure.figsize'] = (12, 8)\n",
        "\n",
        "print(\"✅ Libraries imported successfully!\")\n",
        "print(\"🏁 Advanced F1 Predictor Ready!\")"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-08-15T08:02:09.073767Z",
          "iopub.execute_input": "2025-08-15T08:02:09.074017Z",
          "iopub.status.idle": "2025-08-15T08:02:10.916312Z",
          "shell.execute_reply.started": "2025-08-15T08:02:09.073998Z",
          "shell.execute_reply": "2025-08-15T08:02:10.915739Z"
        },
        "id": "KDNr-UNP6Yr4",
        "outputId": "8f578b1b-431e-4f9b-86d6-c5b9e4db9586"
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "✅ Libraries imported successfully!\n🏁 Advanced F1 Predictor Ready!\n",
          "output_type": "stream"
        }
      ],
      "execution_count": null
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 🏁 Circuit Graphics & Data"
      ],
      "metadata": {
        "id": "g-qiWA9Q6Yr9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Circuit graphics and detailed characteristics\n",
        "circuit_graphics = {\n",
        "    'Monaco': {\n",
        "        'ascii': \"\"\"\n",
        "    🏁 MONACO STREET CIRCUIT 🏁\n",
        "    ╭─────────────────────────╮\n",
        "    │  ╭─╮     Casino    ╭─╮  │\n",
        "    │  │ │    Square     │ │  │\n",
        "    │  ╰─╯               ╰─╯  │\n",
        "    │     ╲               ╱   │\n",
        "    │      ╲_____________╱    │\n",
        "    │         Hairpin         │\n",
        "    │      ╱─────────────╲    │\n",
        "    │     ╱               ╲   │\n",
        "    │  ╭─╯     Tunnel     ╰─╮ │\n",
        "    │  │                   │ │\n",
        "    │  ╰───────────────────╯ │\n",
        "    ╰─────────────────────────╯\n",
        "        \"\"\",\n",
        "        'difficulty': 95, 'overtaking': 20, 'type': 'Street Circuit',\n",
        "        'length': 3.337, 'corners': 19, 'drs_zones': 1\n",
        "    },\n",
        "    'Silverstone': {\n",
        "        'ascii': \"\"\"\n",
        "    🏁 SILVERSTONE CIRCUIT 🏁\n",
        "    ╭─────────────────────────╮\n",
        "    │ Copse    ╭─────╮  Vale  │\n",
        "    │    ╲     │     │     ╱  │\n",
        "    │     ╲    │     │    ╱   │\n",
        "    │  Maggotts│     │Luffield│\n",
        "    │       ╲  │     │  ╱     │\n",
        "    │        ╲ │     │ ╱      │\n",
        "    │      Becketts  ╱        │\n",
        "    │           ╲   ╱         │\n",
        "    │            ╲ ╱          │\n",
        "    │          Stowe          │\n",
        "    │             │           │\n",
        "    │        Hangar Straight  │\n",
        "    ╰─────────────────────────╯\n",
        "        \"\"\",\n",
        "        'difficulty': 85, 'overtaking': 75, 'type': 'Permanent Circuit',\n",
        "        'length': 5.891, 'corners': 18, 'drs_zones': 2\n",
        "    },\n",
        "    'Spa-Francorchamps': {\n",
        "        'ascii': \"\"\"\n",
        "    🏁 SPA-FRANCORCHAMPS 🏁\n",
        "    ╭─────────────────────────╮\n",
        "    │    La Source           │\n",
        "    │       │                │\n",
        "    │   Eau Rouge            │\n",
        "    │      ╱╲                │\n",
        "    │     ╱  ╲               │\n",
        "    │    ╱    ╲ Raidillon    │\n",
        "    │   ╱      ╲             │\n",
        "    │  ╱        ╲            │\n",
        "    │ ╱    Kemmel Straight   │\n",
        "    │╱            ╲          │\n",
        "    │              ╲         │\n",
        "    │          Les Combes    │\n",
        "    │               ╲        │\n",
        "    │                ╲_____  │\n",
        "    ╰─────────────────────────╯\n",
        "        \"\"\",\n",
        "        'difficulty': 90, 'overtaking': 80, 'type': 'Permanent Circuit',\n",
        "        'length': 7.004, 'corners': 19, 'drs_zones': 2\n",
        "    },\n",
        "    'Monza': {\n",
        "        'ascii': \"\"\"\n",
        "    🏁 AUTODROMO NAZIONALE MONZA 🏁\n",
        "    ╭─────────────────────────╮\n",
        "    │  ╭─────────────────╮    │\n",
        "    │  │                 │    │\n",
        "    │  │   Variante del  │    │\n",
        "    │  │     Rettifilo   │    │\n",
        "    │  │                 │    │\n",
        "    │  ╰─╮             ╭─╯    │\n",
        "    │    │             │      │\n",
        "    │    │   Curva     │      │\n",
        "    │    │   Grande    │      │\n",
        "    │    │             │      │\n",
        "    │    ╰─╮         ╭─╯      │\n",
        "    │      │ Lesmo 1&2│       │\n",
        "    │      ╰─────────╯        │\n",
        "    ╰─────────────────────────╯\n",
        "        \"\"\",\n",
        "        'difficulty': 70, 'overtaking': 85, 'type': 'Permanent Circuit',\n",
        "        'length': 5.793, 'corners': 11, 'drs_zones': 3\n",
        "    },\n",
        "    'Suzuka': {\n",
        "        'ascii': \"\"\"\n",
        "    🏁 SUZUKA INTERNATIONAL 🏁\n",
        "    ╭─────────────────────────╮\n",
        "    │     ╭─╮    ╭─╮         │\n",
        "    │    ╱   ╲  ╱   ╲        │\n",
        "    │   ╱  S  ╲╱ 130R ╲      │\n",
        "    │  ╱ Curves ╲     ╲     │\n",
        "    │ ╱         ╲     ╲    │\n",
        "    │╱           ╲     ╲   │\n",
        "    │             ╲     ╲  │\n",
        "    │        ╭─────╲     ╲ │\n",
        "    │       ╱       ╲     ╲│\n",
        "    │      ╱ Spoon   ╲     │\n",
        "    │     ╱   Curve   ╲    │\n",
        "    │    ╱             ╲   │\n",
        "    │   ╱_______________╲  │\n",
        "    ╰─────────────────────────╯\n",
        "        \"\"\",\n",
        "        'difficulty': 92, 'overtaking': 60, 'type': 'Permanent Circuit',\n",
        "        'length': 5.807, 'corners': 18, 'drs_zones': 1\n",
        "    },\n",
        "    'Interlagos': {\n",
        "        'ascii': \"\"\"\n",
        "    🏁 INTERLAGOS CIRCUIT 🏁\n",
        "    ╭─────────────────────────╮\n",
        "    │  Senna S    ╭─╮        │\n",
        "    │     ╲      ╱   ╲       │\n",
        "    │      ╲    ╱     ╲      │\n",
        "    │       ╲  ╱       ╲     │\n",
        "    │        ╲╱         ╲    │\n",
        "    │                    ╲   │\n",
        "    │     Descida do Lago ╲  │\n",
        "    │                      ╲ │\n",
        "    │                       ╲│\n",
        "    │        ╭───────────────╯\n",
        "    │       ╱                │\n",
        "    │      ╱   Subida do     │\n",
        "    │     ╱      Lago        │\n",
        "    │    ╱___________________│\n",
        "    ╰─────────────────────────╯\n",
        "        \"\"\",\n",
        "        'difficulty': 88, 'overtaking': 70, 'type': 'Permanent Circuit',\n",
        "        'length': 4.309, 'corners': 15, 'drs_zones': 2\n",
        "    },\n",
        "    'Austin': {\n",
        "        'ascii': \"\"\"\n",
        "    🏁 CIRCUIT OF THE AMERICAS 🏁\n",
        "    ╭─────────────────────────╮\n",
        "    │      Turn 1             │\n",
        "    │        ╱╲               │\n",
        "    │       ╱  ╲              │\n",
        "    │      ╱    ╲             │\n",
        "    │     ╱      ╲            │\n",
        "    │    ╱        ╲           │\n",
        "    │   ╱    S     ╲          │\n",
        "    │  ╱   Curves   ╲         │\n",
        "    │ ╱              ╲        │\n",
        "    │╱                ╲       │\n",
        "    │                  ╲      │\n",
        "    │              Back╲     │\n",
        "    │             Straight╲   │\n",
        "    │                     ╲  │\n",
        "    ╰─────────────────────────╯\n",
        "        \"\"\",\n",
        "        'difficulty': 80, 'overtaking': 75, 'type': 'Permanent Circuit',\n",
        "        'length': 5.513, 'corners': 20, 'drs_zones': 2\n",
        "    },\n",
        "    'Bahrain': {\n",
        "        'ascii': \"\"\"\n",
        "    🏁 BAHRAIN INTERNATIONAL 🏁\n",
        "    ╭─────────────────────────╮\n",
        "    │  Turn 1   ╭─────╮       │\n",
        "    │     ╲     │     │       │\n",
        "    │      ╲    │     │       │\n",
        "    │       ╲   │     │       │\n",
        "    │        ╲  │     │       │\n",
        "    │         ╲ │     │       │\n",
        "    │          ╲│     │       │\n",
        "    │           ╲     │       │\n",
        "    │            ╲    │       │\n",
        "    │             ╲   │       │\n",
        "    │              ╲  │       │\n",
        "    │               ╲ │       │\n",
        "    │                ╲│       │\n",
        "    │                 ╲       │\n",
        "    ╰─────────────────────────╯\n",
        "        \"\"\",\n",
        "        'difficulty': 75, 'overtaking': 80, 'type': 'Permanent Circuit',\n",
        "        'length': 5.412, 'corners': 15, 'drs_zones': 3\n",
        "    }\n",
        "}\n",
        "\n",
        "print(\"🏁 Circuit graphics and data loaded!\")\n",
        "print(f\"📊 Available circuits: {len(circuit_graphics)}\")"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-08-15T08:02:23.044984Z",
          "iopub.execute_input": "2025-08-15T08:02:23.045221Z",
          "iopub.status.idle": "2025-08-15T08:02:23.055531Z",
          "shell.execute_reply.started": "2025-08-15T08:02:23.045203Z",
          "shell.execute_reply": "2025-08-15T08:02:23.054871Z"
        },
        "id": "MRcpmlqU6Yr-",
        "outputId": "b0c2b167-500d-42df-abe1-93145ce18eae"
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "🏁 Circuit graphics and data loaded!\n📊 Available circuits: 8\n",
          "output_type": "stream"
        }
      ],
      "execution_count": null
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 📊 F1 Historical Data Generation (1990-2024)"
      ],
      "metadata": {
        "id": "SOtxR2W36YsB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Generate comprehensive F1 historical data\n",
        "np.random.seed(42)\n",
        "\n",
        "# Define F1 teams by era with realistic performance evolution\n",
        "teams_by_era = {\n",
        "    1990: ['McLaren', 'Ferrari', 'Williams', 'Benetton', 'Tyrrell', 'Lotus', 'Arrows', 'Brabham', 'Minardi', 'Osella'],\n",
        "    1995: ['Benetton', 'Williams', 'Ferrari', 'McLaren', 'Jordan', 'Ligier', 'Sauber', 'Footwork', 'Minardi', 'Pacific'],\n",
        "    2000: ['Ferrari', 'McLaren', 'Williams', 'Benetton', 'Jordan', 'BAR', 'Sauber', 'Arrows', 'Minardi', 'Jaguar'],\n",
        "    2005: ['Renault', 'McLaren', 'Ferrari', 'Toyota', 'Williams', 'BMW Sauber', 'Red Bull', 'Jordan', 'Minardi', 'BAR'],\n",
        "    2010: ['Red Bull Racing', 'McLaren', 'Ferrari', 'Mercedes', 'Renault', 'Williams', 'Force India', 'Sauber', 'Toro Rosso', 'Lotus'],\n",
        "    2015: ['Mercedes', 'Ferrari', 'Williams', 'Red Bull Racing', 'Force India', 'Lotus', 'Toro Rosso', 'Sauber', 'McLaren', 'Manor'],\n",
        "    2020: ['Mercedes', 'Red Bull Racing', 'McLaren', 'Racing Point', 'Renault', 'Ferrari', 'AlphaTauri', 'Alfa Romeo', 'Haas', 'Williams'],\n",
        "    2024: ['Red Bull Racing', 'Mercedes', 'Ferrari', 'McLaren', 'Aston Martin', 'Alpine', 'Williams', 'RB', 'Kick Sauber', 'Haas']\n",
        "}\n",
        "\n",
        "# Define legendary drivers with their peak performance periods\n",
        "legendary_drivers = {\n",
        "    'Ayrton Senna': {'years': (1990, 1994), 'skill': 98, 'teams': ['McLaren']},\n",
        "    'Michael Schumacher': {'years': (1991, 2006), 'skill': 97, 'teams': ['Benetton', 'Ferrari']},\n",
        "    'Mika Hakkinen': {'years': (1991, 2001), 'skill': 92, 'teams': ['McLaren']},\n",
        "    'Lewis Hamilton': {'years': (2007, 2024), 'skill': 96, 'teams': ['McLaren', 'Mercedes']},\n",
        "    'Sebastian Vettel': {'years': (2007, 2022), 'skill': 94, 'teams': ['Toro Rosso', 'Red Bull Racing', 'Ferrari', 'Aston Martin']},\n",
        "    'Max Verstappen': {'years': (2015, 2024), 'skill': 97, 'teams': ['Toro Rosso', 'Red Bull Racing']},\n",
        "    'Fernando Alonso': {'years': (2001, 2024), 'skill': 95, 'teams': ['Minardi', 'McLaren', 'Renault', 'Ferrari', 'Aston Martin']},\n",
        "    'Kimi Raikkonen': {'years': (2001, 2021), 'skill': 90, 'teams': ['Sauber', 'McLaren', 'Ferrari', 'Lotus', 'Alfa Romeo']},\n",
        "    'Charles Leclerc': {'years': (2018, 2024), 'skill': 92, 'teams': ['Sauber', 'Ferrari']},\n",
        "    'Lando Norris': {'years': (2019, 2024), 'skill': 88, 'teams': ['McLaren']},\n",
        "    'George Russell': {'years': (2019, 2024), 'skill': 87, 'teams': ['Williams', 'Mercedes']},\n",
        "    'Carlos Sainz Jr': {'years': (2015, 2024), 'skill': 86, 'teams': ['Toro Rosso', 'Renault', 'McLaren', 'Ferrari']}\n",
        "}\n",
        "\n",
        "# Team performance by era (realistic dominance periods)\n",
        "team_performance_by_era = {\n",
        "    1990: {'McLaren': 95, 'Ferrari': 85, 'Williams': 90, 'Benetton': 80},\n",
        "    1995: {'Benetton': 95, 'Williams': 92, 'Ferrari': 85, 'McLaren': 80},\n",
        "    2000: {'Ferrari': 95, 'McLaren': 88, 'Williams': 82, 'Benetton': 78},\n",
        "    2005: {'Renault': 92, 'McLaren': 90, 'Ferrari': 85, 'Toyota': 75},\n",
        "    2010: {'Red Bull Racing': 95, 'McLaren': 88, 'Ferrari': 85, 'Mercedes': 75},\n",
        "    2015: {'Mercedes': 98, 'Ferrari': 82, 'Williams': 78, 'Red Bull Racing': 75},\n",
        "    2020: {'Mercedes': 95, 'Red Bull Racing': 85, 'McLaren': 78, 'Racing Point': 75},\n",
        "    2024: {'Red Bull Racing': 95, 'Mercedes': 82, 'Ferrari': 85, 'McLaren': 80}\n",
        "}\n",
        "\n",
        "print(\"🏎️ F1 historical data structure created!\")\n",
        "print(f\"📈 Legendary drivers: {len(legendary_drivers)}\")\n",
        "print(f\"🏁 Team eras: {len(teams_by_era)}\")"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-08-15T08:02:24.757804Z",
          "iopub.execute_input": "2025-08-15T08:02:24.758404Z",
          "iopub.status.idle": "2025-08-15T08:02:24.769184Z",
          "shell.execute_reply.started": "2025-08-15T08:02:24.758376Z",
          "shell.execute_reply": "2025-08-15T08:02:24.768312Z"
        },
        "id": "aR3Q8Kmm6YsC",
        "outputId": "c10bedae-5ced-4d60-f91c-6010b7865aa2"
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "🏎️ F1 historical data structure created!\n📈 Legendary drivers: 12\n🏁 Team eras: 8\n",
          "output_type": "stream"
        }
      ],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# Generate comprehensive race data\n",
        "def generate_f1_race_data(num_races=1000):\n",
        "    \"\"\"Generate realistic F1 race data with historical accuracy\"\"\"\n",
        "\n",
        "    races_data = []\n",
        "    circuits = list(circuit_graphics.keys())\n",
        "\n",
        "    for race_id in range(num_races):\n",
        "        year = np.random.choice(range(1990, 2025))\n",
        "        circuit = np.random.choice(circuits)\n",
        "\n",
        "        # Get era-appropriate teams\n",
        "        era_year = max([y for y in teams_by_era.keys() if y <= year])\n",
        "        available_teams = teams_by_era[era_year]\n",
        "\n",
        "        # Weather conditions\n",
        "        weather_conditions = ['Dry', 'Light Rain', 'Heavy Rain', 'Overcast']\n",
        "        weather = np.random.choice(weather_conditions, p=[0.6, 0.2, 0.1, 0.1])\n",
        "\n",
        "        # Generate 20 drivers for the race\n",
        "        race_drivers = []\n",
        "        for pos in range(1, 21):\n",
        "            # Select driver based on era\n",
        "            if year >= 2020:\n",
        "                current_drivers = ['Max Verstappen', 'Lewis Hamilton', 'Charles Leclerc', 'Lando Norris',\n",
        "                                 'George Russell', 'Carlos Sainz Jr', 'Sergio Perez', 'Fernando Alonso']\n",
        "            elif year >= 2010:\n",
        "                current_drivers = ['Lewis Hamilton', 'Sebastian Vettel', 'Fernando Alonso', 'Kimi Raikkonen']\n",
        "            elif year >= 2000:\n",
        "                current_drivers = ['Michael Schumacher', 'Mika Hakkinen', 'Kimi Raikkonen']\n",
        "            else:\n",
        "                current_drivers = ['Ayrton Senna', 'Michael Schumacher', 'Mika Hakkinen']\n",
        "\n",
        "            # Add some random drivers to fill the grid\n",
        "            all_possible_drivers = current_drivers + [f\"Driver_{i}\" for i in range(50)]\n",
        "            driver = np.random.choice(all_possible_drivers[:20])\n",
        "\n",
        "            # Assign team based on driver and era\n",
        "            if driver in legendary_drivers:\n",
        "                driver_info = legendary_drivers[driver]\n",
        "                if year >= driver_info['years'][0] and year <= driver_info['years'][1]:\n",
        "                    team = np.random.choice(driver_info['teams'])\n",
        "                    skill_rating = driver_info['skill']\n",
        "                else:\n",
        "                    team = np.random.choice(available_teams)\n",
        "                    skill_rating = np.random.normal(75, 10)\n",
        "            else:\n",
        "                team = np.random.choice(available_teams)\n",
        "                skill_rating = np.random.normal(75, 10)\n",
        "\n",
        "            # Get team performance for the era\n",
        "            era_performance = team_performance_by_era.get(era_year, {})\n",
        "            team_strength = era_performance.get(team, np.random.normal(75, 10))\n",
        "\n",
        "            # Calculate performance score\n",
        "            circuit_difficulty = circuit_graphics[circuit]['difficulty']\n",
        "            weather_factor = {'Dry': 1.0, 'Light Rain': 0.95, 'Heavy Rain': 0.85, 'Overcast': 0.98}[weather]\n",
        "\n",
        "            performance_score = (\n",
        "                skill_rating * 0.4 +\n",
        "                team_strength * 0.5 +\n",
        "                np.random.normal(0, 5) +\n",
        "                (100 - circuit_difficulty) * 0.1\n",
        "            ) * weather_factor\n",
        "\n",
        "            # Generate lap times and race data\n",
        "            base_lap_time = 90 + np.random.normal(0, 5)  # Base lap time in seconds\n",
        "            avg_lap_time = base_lap_time + (21 - pos) * 0.5  # Position affects lap time\n",
        "\n",
        "            # Pit stops\n",
        "            pit_stops = np.random.choice([1, 2, 3], p=[0.3, 0.6, 0.1])\n",
        "\n",
        "            # Points calculation\n",
        "            points_system = [25, 18, 15, 12, 10, 8, 6, 4, 2, 1] + [0] * 10\n",
        "            points = points_system[pos - 1] if pos <= 10 else 0\n",
        "\n",
        "            race_drivers.append({\n",
        "                'race_id': race_id,\n",
        "                'year': year,\n",
        "                'circuit': circuit,\n",
        "                'driver': driver,\n",
        "                'team': team,\n",
        "                'position': pos,\n",
        "                'points': points,\n",
        "                'skill_rating': skill_rating,\n",
        "                'team_strength': team_strength,\n",
        "                'performance_score': performance_score,\n",
        "                'avg_lap_time': avg_lap_time,\n",
        "                'pit_stops': pit_stops,\n",
        "                'weather': weather,\n",
        "                'circuit_difficulty': circuit_difficulty,\n",
        "                'dnf': np.random.choice([0, 1], p=[0.85, 0.15])  # 15% DNF rate\n",
        "            })\n",
        "\n",
        "        races_data.extend(race_drivers)\n",
        "\n",
        "    return pd.DataFrame(races_data)\n",
        "\n",
        "# Generate the dataset\n",
        "print(\"🔄 Generating comprehensive F1 race data...\")\n",
        "f1_data = generate_f1_race_data(1000)\n",
        "print(f\"✅ Generated {len(f1_data)} race entries!\")\n",
        "print(f\"📊 Years covered: {f1_data['year'].min()} - {f1_data['year'].max()}\")\n",
        "print(f\"🏁 Circuits: {f1_data['circuit'].nunique()}\")\n",
        "print(f\"🏎️ Drivers: {f1_data['driver'].nunique()}\")\n",
        "print(f\"🏆 Teams: {f1_data['team'].nunique()}\")"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-08-15T08:02:27.042018Z",
          "iopub.execute_input": "2025-08-15T08:02:27.042274Z",
          "iopub.status.idle": "2025-08-15T08:02:29.053984Z",
          "shell.execute_reply.started": "2025-08-15T08:02:27.042254Z",
          "shell.execute_reply": "2025-08-15T08:02:29.053095Z"
        },
        "id": "ZLuoKzTa6YsE",
        "outputId": "7e7a5ceb-7393-487e-81d4-7dbc78378aca"
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "🔄 Generating comprehensive F1 race data...\n✅ Generated 20000 race entries!\n📊 Years covered: 1990 - 2024\n🏁 Circuits: 8\n🏎️ Drivers: 30\n🏆 Teams: 34\n",
          "output_type": "stream"
        }
      ],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# Display data overview\n",
        "print(\"📋 F1 Dataset Overview:\")\n",
        "print(\"=\" * 50)\n",
        "print(f1_data.head(10))\n",
        "\n",
        "print(\"\\n📊 Dataset Statistics:\")\n",
        "print(\"=\" * 30)\n",
        "print(f1_data.describe())\n",
        "\n",
        "print(\"\\n🏆 Top Performing Drivers (by average position):\")\n",
        "print(\"=\" * 50)\n",
        "driver_stats = f1_data.groupby('driver').agg({\n",
        "    'position': 'mean',\n",
        "    'points': 'sum',\n",
        "    'race_id': 'count'\n",
        "}).round(2)\n",
        "driver_stats.columns = ['avg_position', 'total_points', 'races']\n",
        "driver_stats = driver_stats[driver_stats['races'] >= 10].sort_values('avg_position')\n",
        "print(driver_stats.head(10))\n",
        "\n",
        "print(\"\\n🏁 Circuit Statistics:\")\n",
        "print(\"=\" * 30)\n",
        "circuit_stats = f1_data.groupby('circuit').agg({\n",
        "    'avg_lap_time': 'mean',\n",
        "    'dnf': 'mean',\n",
        "    'race_id': 'count'\n",
        "}).round(2)\n",
        "circuit_stats.columns = ['avg_lap_time', 'dnf_rate', 'races']\n",
        "print(circuit_stats)"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-08-15T08:02:31.403968Z",
          "iopub.execute_input": "2025-08-15T08:02:31.404569Z",
          "iopub.status.idle": "2025-08-15T08:02:31.484432Z",
          "shell.execute_reply.started": "2025-08-15T08:02:31.404522Z",
          "shell.execute_reply": "2025-08-15T08:02:31.48382Z"
        },
        "id": "Gr5iXNov6YsH",
        "outputId": "2202e451-142c-4cdb-a065-03e2edcd5377"
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "📋 F1 Dataset Overview:\n==================================================\n   race_id  year circuit     driver             team  position  points  \\\n0        0  2018  Austin   Driver_2            Manor         1      25   \n1        0  2018  Austin   Driver_7          McLaren         2      18   \n2        0  2018  Austin  Driver_10         Williams         3      15   \n3        0  2018  Austin  Driver_13  Red Bull Racing         4      12   \n4        0  2018  Austin   Driver_2           Sauber         5      10   \n5        0  2018  Austin  Driver_13            Manor         6       8   \n6        0  2018  Austin   Driver_3      Force India         7       6   \n7        0  2018  Austin   Driver_4         Mercedes         8       4   \n8        0  2018  Austin   Driver_3         Williams         9       2   \n9        0  2018  Austin   Driver_7          Ferrari        10       1   \n\n   skill_rating  team_strength  performance_score  avg_lap_time  pit_stops  \\\n0     77.790413      85.105153          69.126133     97.374151          1   \n1     83.164451      59.761240          59.855862     95.787966          2   \n2     76.424646      78.000000          73.379477     98.476272          2   \n3     75.951258      75.000000          65.720440     98.334033          1   \n4     83.225449      62.791564          64.343765     88.201649          2   \n5     53.216658      64.561036          53.609117     99.120994          2   \n6     60.214780      67.801558          54.799322    102.285611          1   \n7     74.564632      98.000000          69.359993     92.521845          1   \n8     79.760426      78.000000          70.264000     98.985223          3   \n9     72.542523      82.000000          74.173977    101.667484          2   \n\n      weather  circuit_difficulty  dnf  \n0  Light Rain                  80    0  \n1  Light Rain                  80    0  \n2  Light Rain                  80    0  \n3  Light Rain                  80    0  \n4  Light Rain                  80    0  \n5  Light Rain                  80    0  \n6  Light Rain                  80    0  \n7  Light Rain                  80    0  \n8  Light Rain                  80    1  \n9  Light Rain                  80    0  \n\n📊 Dataset Statistics:\n==============================\n            race_id          year      position        points  skill_rating  \\\ncount  20000.000000  20000.000000  20000.000000  20000.000000  20000.000000   \nmean     499.500000   2007.647000     10.500000      5.050000     77.965977   \nstd      288.682207      9.791077      5.766425      7.172871     11.547261   \nmin        0.000000   1990.000000      1.000000      0.000000     30.370315   \n25%      249.750000   2000.000000      5.750000      0.000000     69.589518   \n50%      499.500000   2008.000000     10.500000      0.500000     77.415543   \n75%      749.250000   2016.000000     15.250000      8.500000     87.000000   \nmax      999.000000   2024.000000     20.000000     25.000000    113.091651   \n\n       team_strength  performance_score  avg_lap_time     pit_stops  \\\ncount   20000.000000       20000.000000  20000.000000  20000.000000   \nmean       79.607682          70.328741     95.274156      1.796300   \nstd        10.346899           9.206168      5.768079      0.602349   \nmin        37.112992          33.612025     71.507098      1.000000   \n25%        73.423833          64.125485     91.334437      1.000000   \n50%        80.000000          70.365920     95.261012      2.000000   \n75%        87.127502          76.598606     99.209593      2.000000   \nmax       110.540497         102.067549    116.831168      3.000000   \n\n       circuit_difficulty           dnf  \ncount        20000.000000  20000.000000  \nmean            84.856000      0.150050  \nstd              8.143008      0.357129  \nmin             70.000000      0.000000  \n25%             80.000000      0.000000  \n50%             88.000000      0.000000  \n75%             92.000000      0.000000  \nmax             95.000000      1.000000  \n\n🏆 Top Performing Drivers (by average position):\n==================================================\n                 avg_position  total_points  races\ndriver                                            \nMika Hakkinen           10.03          3049    555\nDriver_0                10.10          5317    978\nCarlos Sainz Jr         10.15           724    147\nDriver_16               10.29          2980    563\nDriver_2                10.30          5047    988\nMax Verstappen          10.31           686    136\nSergio Perez            10.32           612    128\nDriver_15               10.34          4681    902\nDriver_3                10.36          5100    961\nDriver_14               10.38          4593    886\n\n🏁 Circuit Statistics:\n==============================\n                   avg_lap_time  dnf_rate  races\ncircuit                                         \nAustin                    95.36      0.15   2420\nBahrain                   95.36      0.14   2240\nInterlagos                95.10      0.14   2260\nMonaco                    95.21      0.14   2760\nMonza                     95.60      0.16   2400\nSilverstone               95.01      0.14   2400\nSpa-Francorchamps         95.27      0.17   2700\nSuzuka                    95.28      0.15   2820\n",
          "output_type": "stream"
        }
      ],
      "execution_count": null
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 🔧 Interactive Analysis Functions"
      ],
      "metadata": {
        "id": "gE6_hfjX6YsI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def analyze_circuit(circuit_name):\n",
        "    \"\"\"Display circuit graphics and comprehensive analysis\"\"\"\n",
        "\n",
        "    if circuit_name not in circuit_graphics:\n",
        "        print(f\"❌ Circuit '{circuit_name}' not found!\")\n",
        "        return\n",
        "\n",
        "    circuit = circuit_graphics[circuit_name]\n",
        "\n",
        "    # Display ASCII graphics\n",
        "    print(circuit['ascii'])\n",
        "\n",
        "    # Circuit characteristics\n",
        "    print(f\"\\n🏁 {circuit_name.upper()} CHARACTERISTICS:\")\n",
        "    print(\"=\" * 40)\n",
        "    print(f\"🎯 Difficulty Rating: {circuit['difficulty']}/100\")\n",
        "    print(f\"🚗 Overtaking Difficulty: {circuit['overtaking']}/100\")\n",
        "    print(f\"🏗️ Circuit Type: {circuit['type']}\")\n",
        "    print(f\"📏 Length: {circuit['length']} km\")\n",
        "    print(f\"🔄 Corners: {circuit['corners']}\")\n",
        "    print(f\"💨 DRS Zones: {circuit['drs_zones']}\")\n",
        "\n",
        "    # Historical data for this circuit\n",
        "    circuit_data = f1_data[f1_data['circuit'] == circuit_name]\n",
        "\n",
        "    if len(circuit_data) > 0:\n",
        "        print(f\"\\n📊 HISTORICAL PERFORMANCE AT {circuit_name.upper()}:\")\n",
        "        print(\"=\" * 50)\n",
        "        print(f\"🏁 Total Races: {circuit_data['race_id'].nunique()}\")\n",
        "        print(f\"⏱️ Average Lap Time: {circuit_data['avg_lap_time'].mean():.3f}s\")\n",
        "        print(f\"🔧 Average Pit Stops: {circuit_data['pit_stops'].mean():.1f}\")\n",
        "        print(f\"❌ DNF Rate: {circuit_data['dnf'].mean()*100:.1f}%\")\n",
        "\n",
        "        # Top performers at this circuit\n",
        "        top_performers = circuit_data.groupby('driver').agg({\n",
        "            'position': 'mean',\n",
        "            'points': 'sum',\n",
        "            'race_id': 'count'\n",
        "        }).round(2)\n",
        "        top_performers.columns = ['avg_position', 'total_points', 'races']\n",
        "        top_performers = top_performers[top_performers['races'] >= 3].sort_values('avg_position')\n",
        "\n",
        "        print(f\"\\n🏆 TOP 5 PERFORMERS AT {circuit_name.upper()}:\")\n",
        "        print(\"-\" * 45)\n",
        "        for i, (driver, stats) in enumerate(top_performers.head(5).iterrows()):\n",
        "            print(f\"{i+1}. {driver}: Avg Pos {stats['avg_position']:.1f} ({stats['races']} races)\")\n",
        "\n",
        "    return circuit_data\n",
        "\n",
        "# Test the function\n",
        "print(\"🔧 Circuit analysis function ready!\")\n",
        "print(\"📋 Usage: analyze_circuit('Monaco')\")"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-08-15T08:02:35.268534Z",
          "iopub.execute_input": "2025-08-15T08:02:35.26915Z",
          "iopub.status.idle": "2025-08-15T08:02:35.277241Z",
          "shell.execute_reply.started": "2025-08-15T08:02:35.269128Z",
          "shell.execute_reply": "2025-08-15T08:02:35.276416Z"
        },
        "id": "INknyc406YsK",
        "outputId": "2fb9f201-d996-4ea9-ca23-f0002e9c630b"
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "🔧 Circuit analysis function ready!\n📋 Usage: analyze_circuit('Monaco')\n",
          "output_type": "stream"
        }
      ],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "def driver_battle_analysis(driver1, driver2, year_filter=None):\n",
        "    \"\"\"Comprehensive head-to-head driver comparison\"\"\"\n",
        "\n",
        "    # Filter data\n",
        "    if year_filter:\n",
        "        data = f1_data[f1_data['year'] == year_filter]\n",
        "        print(f\"🗓️ DRIVER BATTLE ANALYSIS - {year_filter}\")\n",
        "    else:\n",
        "        data = f1_data\n",
        "        print(\"🗓️ DRIVER BATTLE ANALYSIS - ALL TIME\")\n",
        "\n",
        "    print(\"=\" * 50)\n",
        "\n",
        "    driver1_data = data[data['driver'] == driver1]\n",
        "    driver2_data = data[data['driver'] == driver2]\n",
        "\n",
        "    if len(driver1_data) == 0:\n",
        "        print(f\"❌ No data found for {driver1}\")\n",
        "        return\n",
        "    if len(driver2_data) == 0:\n",
        "        print(f\"❌ No data found for {driver2}\")\n",
        "        return\n",
        "\n",
        "    print(f\"🥊 {driver1} vs {driver2}\")\n",
        "    print(\"-\" * 30)\n",
        "\n",
        "    # Basic stats comparison\n",
        "    stats_comparison = {\n",
        "        'Races': [len(driver1_data), len(driver2_data)],\n",
        "        'Avg Position': [driver1_data['position'].mean(), driver2_data['position'].mean()],\n",
        "        'Total Points': [driver1_data['points'].sum(), driver2_data['points'].sum()],\n",
        "        'Wins': [len(driver1_data[driver1_data['position'] == 1]), len(driver2_data[driver2_data['position'] == 1])],\n",
        "        'Podiums': [len(driver1_data[driver1_data['position'] <= 3]), len(driver2_data[driver2_data['position'] <= 3])],\n",
        "        'DNF Rate': [driver1_data['dnf'].mean()*100, driver2_data['dnf'].mean()*100],\n",
        "        'Avg Skill': [driver1_data['skill_rating'].mean(), driver2_data['skill_rating'].mean()]\n",
        "    }\n",
        "\n",
        "    print(f\"{'Metric':<15} {driver1:<15} {driver2:<15} {'Winner':<10}\")\n",
        "    print(\"-\" * 65)\n",
        "\n",
        "    for metric, values in stats_comparison.items():\n",
        "        val1, val2 = values[0], values[1]\n",
        "\n",
        "        if metric in ['Avg Position', 'DNF Rate']:\n",
        "            winner = driver1 if val1 < val2 else driver2\n",
        "        else:\n",
        "            winner = driver1 if val1 > val2 else driver2\n",
        "\n",
        "        if metric == 'DNF Rate':\n",
        "            print(f\"{metric:<15} {val1:<15.1f}% {val2:<15.1f}% {winner:<10}\")\n",
        "        elif metric in ['Avg Position', 'Avg Skill']:\n",
        "            print(f\"{metric:<15} {val1:<15.2f} {val2:<15.2f} {winner:<10}\")\n",
        "        else:\n",
        "            print(f\"{metric:<15} {val1:<15.0f} {val2:<15.0f} {winner:<10}\")\n",
        "\n",
        "    # Circuit-specific comparison\n",
        "    print(f\"\\n🏁 CIRCUIT PERFORMANCE COMPARISON:\")\n",
        "    print(\"-\" * 40)\n",
        "\n",
        "    common_circuits = set(driver1_data['circuit']) & set(driver2_data['circuit'])\n",
        "\n",
        "    for circuit in list(common_circuits)[:5]:  # Show top 5 common circuits\n",
        "        d1_circuit = driver1_data[driver1_data['circuit'] == circuit]['position'].mean()\n",
        "        d2_circuit = driver2_data[driver2_data['circuit'] == circuit]['position'].mean()\n",
        "        better = driver1 if d1_circuit < d2_circuit else driver2\n",
        "        print(f\"{circuit:<15}: {driver1} {d1_circuit:.1f} vs {driver2} {d2_circuit:.1f} → {better}\")\n",
        "\n",
        "    return driver1_data, driver2_data\n",
        "\n",
        "print(\"🥊 Driver battle analysis function ready!\")\n",
        "print(\"📋 Usage: driver_battle_analysis('Max Verstappen', 'Lewis Hamilton', 2024)\")"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-08-15T08:02:37.079495Z",
          "iopub.execute_input": "2025-08-15T08:02:37.080179Z",
          "iopub.status.idle": "2025-08-15T08:02:37.090573Z",
          "shell.execute_reply.started": "2025-08-15T08:02:37.080157Z",
          "shell.execute_reply": "2025-08-15T08:02:37.089988Z"
        },
        "id": "2lnblUmO6YsL",
        "outputId": "30ac87af-8eaa-4458-e72f-b3f3c63edfb4"
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "🥊 Driver battle analysis function ready!\n📋 Usage: driver_battle_analysis('Max Verstappen', 'Lewis Hamilton', 2024)\n",
          "output_type": "stream"
        }
      ],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "def predict_race_results(circuit, year=2024, weather='Dry', top_n=10):\n",
        "    \"\"\"Advanced race prediction with multiple factors\"\"\"\n",
        "\n",
        "    print(f\"🔮 RACE PREDICTION: {circuit} {year}\")\n",
        "    print(f\"🌤️ Weather: {weather}\")\n",
        "    print(\"=\" * 50)\n",
        "\n",
        "    # Get circuit characteristics\n",
        "    if circuit not in circuit_graphics:\n",
        "        print(f\"❌ Circuit '{circuit}' not found!\")\n",
        "        return\n",
        "\n",
        "    circuit_info = circuit_graphics[circuit]\n",
        "\n",
        "    # Filter recent data for more accurate predictions\n",
        "    recent_data = f1_data[f1_data['year'] >= year-3]  # Last 3 years\n",
        "\n",
        "    # Get current era drivers and teams\n",
        "    if year >= 2020:\n",
        "        current_drivers = {\n",
        "            'Max Verstappen': {'team': 'Red Bull Racing', 'skill': 97},\n",
        "            'Lewis Hamilton': {'team': 'Mercedes', 'skill': 96},\n",
        "            'Charles Leclerc': {'team': 'Ferrari', 'skill': 92},\n",
        "            'Lando Norris': {'team': 'McLaren', 'skill': 88},\n",
        "            'George Russell': {'team': 'Mercedes', 'skill': 87},\n",
        "            'Carlos Sainz Jr': {'team': 'Ferrari', 'skill': 86},\n",
        "            'Sergio Perez': {'team': 'Red Bull Racing', 'skill': 84},\n",
        "            'Fernando Alonso': {'team': 'Aston Martin', 'skill': 95},\n",
        "            'Oscar Piastri': {'team': 'McLaren', 'skill': 82},\n",
        "            'Alexander Albon': {'team': 'Williams', 'skill': 80}\n",
        "        }\n",
        "    else:\n",
        "        # Use historical drivers for older years\n",
        "        current_drivers = {\n",
        "            'Michael Schumacher': {'team': 'Ferrari', 'skill': 97},\n",
        "            'Mika Hakkinen': {'team': 'McLaren', 'skill': 92},\n",
        "            'David Coulthard': {'team': 'McLaren', 'skill': 85},\n",
        "            'Rubens Barrichello': {'team': 'Ferrari', 'skill': 83}\n",
        "        }\n",
        "\n",
        "    # Team strengths for current era\n",
        "    team_strengths = {\n",
        "        'Red Bull Racing': 95, 'Mercedes': 82, 'Ferrari': 85, 'McLaren': 80,\n",
        "        'Aston Martin': 75, 'Alpine': 70, 'Williams': 65, 'RB': 68,\n",
        "        'Kick Sauber': 60, 'Haas': 62\n",
        "    }\n",
        "\n",
        "    # Weather impact factors\n",
        "    weather_factors = {\n",
        "        'Dry': 1.0,\n",
        "        'Light Rain': 0.95,\n",
        "        'Heavy Rain': 0.85,\n",
        "        'Overcast': 0.98\n",
        "    }\n",
        "\n",
        "    predictions = []\n",
        "\n",
        "    for driver, info in current_drivers.items():\n",
        "        # Base performance calculation\n",
        "        driver_skill = info['skill']\n",
        "        team_strength = team_strengths.get(info['team'], 70)\n",
        "\n",
        "        # Circuit-specific adjustments\n",
        "        circuit_factor = (100 - circuit_info['difficulty']) / 100\n",
        "        weather_factor = weather_factors[weather]\n",
        "\n",
        "        # Historical performance at this circuit\n",
        "        historical_perf = recent_data[\n",
        "            (recent_data['driver'] == driver) &\n",
        "            (recent_data['circuit'] == circuit)\n",
        "        ]\n",
        "\n",
        "        if len(historical_perf) > 0:\n",
        "            historical_bonus = (10 - historical_perf['position'].mean()) * 2\n",
        "        else:\n",
        "            historical_bonus = 0\n",
        "\n",
        "        # Calculate final performance score\n",
        "        performance_score = (\n",
        "            driver_skill * 0.4 +\n",
        "            team_strength * 0.5 +\n",
        "            historical_bonus * 0.1 +\n",
        "            np.random.normal(0, 3)  # Random factor\n",
        "        ) * circuit_factor * weather_factor\n",
        "\n",
        "        # Convert to position (higher score = better position)\n",
        "        predicted_position = max(1, min(20, int(21 - (performance_score / 10))))\n",
        "\n",
        "        # Calculate podium probability\n",
        "        podium_prob = max(0, min(100, (performance_score - 70) * 2))\n",
        "\n",
        "        # Points prediction\n",
        "        points_system = [25, 18, 15, 12, 10, 8, 6, 4, 2, 1] + [0] * 10\n",
        "        predicted_points = points_system[predicted_position - 1] if predicted_position <= 10 else 0\n",
        "\n",
        "        predictions.append({\n",
        "            'driver': driver,\n",
        "            'team': info['team'],\n",
        "            'predicted_position': predicted_position,\n",
        "            'podium_probability': podium_prob,\n",
        "            'predicted_points': predicted_points,\n",
        "            'performance_score': performance_score\n",
        "        })\n",
        "\n",
        "    # Sort by predicted position\n",
        "    predictions.sort(key=lambda x: x['predicted_position'])\n",
        "\n",
        "    # Display results\n",
        "    print(f\"🏁 PREDICTED RACE RESULTS:\")\n",
        "    print(\"-\" * 70)\n",
        "    print(f\"{'Pos':<4} {'Driver':<18} {'Team':<15} {'Podium%':<8} {'Points':<6}\")\n",
        "    print(\"-\" * 70)\n",
        "\n",
        "    for i, pred in enumerate(predictions[:top_n]):\n",
        "        pos_emoji = \"🥇\" if pred['predicted_position'] == 1 else \"🥈\" if pred['predicted_position'] == 2 else \"🥉\" if pred['predicted_position'] == 3 else \"  \"\n",
        "        print(f\"{pos_emoji} #{pred['predicted_position']:<2} {pred['driver']:<18} ({pred['team']:<13}) {pred['podium_probability']:<6.1f}% {pred['predicted_points']:<6}\")\n",
        "\n",
        "    return predictions\n",
        "\n",
        "print(\"🔮 Advanced race prediction function ready!\")\n",
        "print(\"📋 Usage: predict_race_results('Monaco', 2024, 'Dry')\")"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-08-15T08:02:39.733811Z",
          "iopub.execute_input": "2025-08-15T08:02:39.734086Z",
          "iopub.status.idle": "2025-08-15T08:02:39.747583Z",
          "shell.execute_reply.started": "2025-08-15T08:02:39.734065Z",
          "shell.execute_reply": "2025-08-15T08:02:39.746852Z"
        },
        "id": "RgM3M7sv6YsN",
        "outputId": "60466438-73a8-4c15-b6a5-920782d75f78"
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "🔮 Advanced race prediction function ready!\n📋 Usage: predict_race_results('Monaco', 2024, 'Dry')\n",
          "output_type": "stream"
        }
      ],
      "execution_count": null
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 🤖 Machine Learning Prediction Models"
      ],
      "metadata": {
        "id": "dgIiWDX56YsO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Prepare data for machine learning\n",
        "def prepare_ml_data():\n",
        "    \"\"\"Prepare and clean data for ML models\"\"\"\n",
        "\n",
        "    # Create feature columns\n",
        "    ml_data = f1_data.copy()\n",
        "\n",
        "    # Encode categorical variables\n",
        "    from sklearn.preprocessing import LabelEncoder\n",
        "\n",
        "    le_driver = LabelEncoder()\n",
        "    le_team = LabelEncoder()\n",
        "    le_circuit = LabelEncoder()\n",
        "    le_weather = LabelEncoder()\n",
        "\n",
        "    ml_data['driver_encoded'] = le_driver.fit_transform(ml_data['driver'])\n",
        "    ml_data['team_encoded'] = le_team.fit_transform(ml_data['team'])\n",
        "    ml_data['circuit_encoded'] = le_circuit.fit_transform(ml_data['circuit'])\n",
        "    ml_data['weather_encoded'] = le_weather.fit_transform(ml_data['weather'])\n",
        "\n",
        "    # Feature engineering\n",
        "    ml_data['skill_team_ratio'] = ml_data['skill_rating'] / ml_data['team_strength']\n",
        "    ml_data['performance_per_pitstop'] = ml_data['performance_score'] / (ml_data['pit_stops'] + 1)\n",
        "    ml_data['weather_skill_interaction'] = ml_data['skill_rating'] * ml_data['weather_encoded']\n",
        "\n",
        "    # Select features\n",
        "    features = [\n",
        "        'skill_rating', 'team_strength', 'circuit_difficulty', 'pit_stops',\n",
        "        'driver_encoded', 'team_encoded', 'circuit_encoded', 'weather_encoded',\n",
        "        'year', 'skill_team_ratio', 'performance_per_pitstop', 'weather_skill_interaction'\n",
        "    ]\n",
        "\n",
        "    X = ml_data[features]\n",
        "    y_position = ml_data['position']\n",
        "    y_points = ml_data['points']\n",
        "\n",
        "    return X, y_position, y_points, ml_data, (le_driver, le_team, le_circuit, le_weather)\n",
        "\n",
        "# Prepare the data\n",
        "X, y_position, y_points, ml_data, encoders = prepare_ml_data()\n",
        "\n",
        "print(\"🔧 Data prepared for ML models!\")\n",
        "print(f\"📊 Features: {X.shape[1]}\")\n",
        "print(f\"🏁 Samples: {X.shape[0]}\")\n",
        "print(f\"📈 Feature columns: {list(X.columns)}\")"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-08-15T08:02:43.994377Z",
          "iopub.execute_input": "2025-08-15T08:02:43.995195Z",
          "iopub.status.idle": "2025-08-15T08:02:44.052393Z",
          "shell.execute_reply.started": "2025-08-15T08:02:43.995159Z",
          "shell.execute_reply": "2025-08-15T08:02:44.051787Z"
        },
        "id": "bW1Ewc0a6YsP",
        "outputId": "a5aaae69-a6b2-4f80-f9b1-9374e6c82857"
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "🔧 Data prepared for ML models!\n📊 Features: 12\n🏁 Samples: 20000\n📈 Feature columns: ['skill_rating', 'team_strength', 'circuit_difficulty', 'pit_stops', 'driver_encoded', 'team_encoded', 'circuit_encoded', 'weather_encoded', 'year', 'skill_team_ratio', 'performance_per_pitstop', 'weather_skill_interaction']\n",
          "output_type": "stream"
        }
      ],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "# Train multiple ML models\n",
        "def train_f1_models():\n",
        "    \"\"\"Train comprehensive F1 prediction models\"\"\"\n",
        "\n",
        "    # Split data\n",
        "    X_train, X_test, y_pos_train, y_pos_test, y_pts_train, y_pts_test = train_test_split(\n",
        "        X, y_position, y_points, test_size=0.2, random_state=42\n",
        "    )\n",
        "\n",
        "    # Scale features\n",
        "    scaler = StandardScaler()\n",
        "    X_train_scaled = scaler.fit_transform(X_train)\n",
        "    X_test_scaled = scaler.transform(X_test)\n",
        "\n",
        "    models = {}\n",
        "\n",
        "    # Position Prediction Model\n",
        "    print(\"🔄 Training Position Prediction Model...\")\n",
        "    rf_position = RandomForestRegressor(n_estimators=100, random_state=42, n_jobs=1)\n",
        "    rf_position.fit(X_train_scaled, y_pos_train)\n",
        "\n",
        "    pos_pred = rf_position.predict(X_test_scaled)\n",
        "    pos_mae = mean_absolute_error(y_pos_test, pos_pred)\n",
        "    pos_rmse = np.sqrt(mean_squared_error(y_pos_test, pos_pred))\n",
        "\n",
        "    models['position'] = {\n",
        "        'model': rf_position,\n",
        "        'mae': pos_mae,\n",
        "        'rmse': pos_rmse,\n",
        "        'scaler': scaler\n",
        "    }\n",
        "\n",
        "    print(f\"✅ Position Model - MAE: {pos_mae:.2f}, RMSE: {pos_rmse:.2f}\")\n",
        "\n",
        "    # Points Prediction Model\n",
        "    print(\"🔄 Training Points Prediction Model...\")\n",
        "    rf_points = RandomForestRegressor(n_estimators=100, random_state=42, n_jobs=1)\n",
        "    rf_points.fit(X_train_scaled, y_pts_train)\n",
        "\n",
        "    pts_pred = rf_points.predict(X_test_scaled)\n",
        "    pts_mae = mean_absolute_error(y_pts_test, pts_pred)\n",
        "    pts_rmse = np.sqrt(mean_squared_error(y_pts_test, pts_pred))\n",
        "\n",
        "    models['points'] = {\n",
        "        'model': rf_points,\n",
        "        'mae': pts_mae,\n",
        "        'rmse': pts_rmse,\n",
        "        'scaler': scaler\n",
        "    }\n",
        "\n",
        "    print(f\"✅ Points Model - MAE: {pts_mae:.2f}, RMSE: {pts_rmse:.2f}\")\n",
        "\n",
        "    # Feature importance\n",
        "    feature_importance = pd.DataFrame({\n",
        "        'feature': X.columns,\n",
        "        'importance': rf_position.feature_importances_\n",
        "    }).sort_values('importance', ascending=False)\n",
        "\n",
        "    print(\"\\n🎯 TOP 5 MOST IMPORTANT FEATURES:\")\n",
        "    print(\"-\" * 40)\n",
        "    for i, row in feature_importance.head(5).iterrows():\n",
        "        print(f\"{row['feature']:<20}: {row['importance']:.3f}\")\n",
        "\n",
        "    return models, feature_importance\n",
        "\n",
        "# Train the models\n",
        "trained_models, feature_importance = train_f1_models()"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-08-15T08:02:46.689247Z",
          "iopub.execute_input": "2025-08-15T08:02:46.689894Z"
        },
        "id": "1tKRbhBM6YsQ",
        "outputId": "71038148-ef7d-44c8-b87c-967cb27edf57"
      },
      "outputs": [
        {
          "name": "stdout",
          "text": "🔄 Training Position Prediction Model...\n✅ Position Model - MAE: 5.14, RMSE: 5.96\n🔄 Training Points Prediction Model...\n",
          "output_type": "stream"
        }
      ],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "def ml_race_prediction(circuit, year=2024, weather='Dry', drivers_list=None):\n",
        "    \"\"\"ML-powered race prediction\"\"\"\n",
        "\n",
        "    if drivers_list is None:\n",
        "        drivers_list = [\n",
        "            'Max Verstappen', 'Lewis Hamilton', 'Charles Leclerc', 'Lando Norris',\n",
        "            'George Russell', 'Carlos Sainz Jr', 'Sergio Perez', 'Fernando Alonso',\n",
        "            'Oscar Piastri', 'Alexander Albon'\n",
        "        ]\n",
        "\n",
        "    print(f\"🤖 ML RACE PREDICTION: {circuit} {year}\")\n",
        "    print(f\"🌤️ Weather: {weather}\")\n",
        "    print(\"=\" * 50)\n",
        "\n",
        "    # Get encoders\n",
        "    le_driver, le_team, le_circuit, le_weather = encoders\n",
        "\n",
        "    # Current driver-team assignments\n",
        "    driver_teams = {\n",
        "        'Max Verstappen': 'Red Bull Racing',\n",
        "        'Lewis Hamilton': 'Mercedes',\n",
        "        'Charles Leclerc': 'Ferrari',\n",
        "        'Lando Norris': 'McLaren',\n",
        "        'George Russell': 'Mercedes',\n",
        "        'Carlos Sainz Jr': 'Ferrari',\n",
        "        'Sergio Perez': 'Red Bull Racing',\n",
        "        'Fernando Alonso': 'Aston Martin',\n",
        "        'Oscar Piastri': 'McLaren',\n",
        "        'Alexander Albon': 'Williams'\n",
        "    }\n",
        "\n",
        "    predictions = []\n",
        "\n",
        "    for driver in drivers_list:\n",
        "        if driver not in driver_teams:\n",
        "            continue\n",
        "\n",
        "        team = driver_teams[driver]\n",
        "\n",
        "        # Get historical data for this driver\n",
        "        driver_data = f1_data[f1_data['driver'] == driver]\n",
        "\n",
        "        if len(driver_data) > 0:\n",
        "            skill_rating = driver_data['skill_rating'].mean()\n",
        "            team_strength = driver_data['team_strength'].mean()\n",
        "        else:\n",
        "            skill_rating = 80  # Default\n",
        "            team_strength = 75  # Default\n",
        "\n",
        "        # Circuit difficulty\n",
        "        circuit_difficulty = circuit_graphics[circuit]['difficulty']\n",
        "\n",
        "        # Create feature vector\n",
        "        try:\n",
        "            driver_encoded = le_driver.transform([driver])[0]\n",
        "        except:\n",
        "            driver_encoded = 0\n",
        "\n",
        "        try:\n",
        "            team_encoded = le_team.transform([team])[0]\n",
        "        except:\n",
        "            team_encoded = 0\n",
        "\n",
        "        try:\n",
        "            circuit_encoded = le_circuit.transform([circuit])[0]\n",
        "        except:\n",
        "            circuit_encoded = 0\n",
        "\n",
        "        try:\n",
        "            weather_encoded = le_weather.transform([weather])[0]\n",
        "        except:\n",
        "            weather_encoded = 0\n",
        "\n",
        "        pit_stops = 2  # Average\n",
        "        skill_team_ratio = skill_rating / team_strength\n",
        "        performance_per_pitstop = skill_rating / (pit_stops + 1)\n",
        "        weather_skill_interaction = skill_rating * weather_encoded\n",
        "\n",
        "        features = np.array([[\n",
        "            skill_rating, team_strength, circuit_difficulty, pit_stops,\n",
        "            driver_encoded, team_encoded, circuit_encoded, weather_encoded,\n",
        "            year, skill_team_ratio, performance_per_pitstop, weather_skill_interaction\n",
        "        ]])\n",
        "\n",
        "        # Scale features\n",
        "        features_scaled = trained_models['position']['scaler'].transform(features)\n",
        "\n",
        "        # Predict\n",
        "        predicted_position = trained_models['position']['model'].predict(features_scaled)[0]\n",
        "        predicted_points = trained_models['points']['model'].predict(features_scaled)[0]\n",
        "\n",
        "        # Ensure realistic bounds\n",
        "        predicted_position = max(1, min(20, round(predicted_position)))\n",
        "        predicted_points = max(0, min(25, round(predicted_points)))\n",
        "\n",
        "        # Calculate podium probability\n",
        "        podium_prob = max(0, min(100, (25 - predicted_position) * 4))\n",
        "\n",
        "        predictions.append({\n",
        "            'driver': driver,\n",
        "            'team': team,\n",
        "            'predicted_position': predicted_position,\n",
        "            'predicted_points': predicted_points,\n",
        "            'podium_probability': podium_prob\n",
        "        })\n",
        "\n",
        "    # Sort by predicted position\n",
        "    predictions.sort(key=lambda x: x['predicted_position'])\n",
        "\n",
        "    # Display results\n",
        "    print(\"🏁 ML PREDICTED RESULTS:\")\n",
        "    print(\"-\" * 65)\n",
        "    print(f\"{'Pos':<4} {'Driver':<18} {'Team':<15} {'Podium%':<8} {'Points'}\")\n",
        "    print(\"-\" * 65)\n",
        "\n",
        "    for pred in predictions:\n",
        "        pos_emoji = \"🥇\" if pred['predicted_position'] == 1 else \"🥈\" if pred['predicted_position'] == 2 else \"🥉\" if pred['predicted_position'] == 3 else \"  \"\n",
        "        print(f\"{pos_emoji} #{pred['predicted_position']:<2} {pred['driver']:<18} ({pred['team']:<13}) {pred['podium_probability']:<6.1f}% {pred['predicted_points']}\")\n",
        "\n",
        "    return predictions\n",
        "\n",
        "print(\"🤖 ML prediction function ready!\")\n",
        "print(\"📋 Usage: ml_race_prediction('Silverstone', 2024, 'Dry')\")"
      ],
      "metadata": {
        "trusted": true,
        "id": "aCj14Mi96YsR"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "def create_f1_visualizations():\n",
        "    \"\"\"Create comprehensive F1 data visualizations\"\"\"\n",
        "\n",
        "    # Set up the plotting style\n",
        "    plt.style.use('default')\n",
        "    fig, axes = plt.subplots(2, 2, figsize=(16, 12))\n",
        "    fig.suptitle('🏎️ F1 Data Analysis Dashboard', fontsize=16, fontweight='bold')\n",
        "\n",
        "    # 1. Driver Performance Distribution\n",
        "    ax1 = axes[0, 0]\n",
        "    top_drivers = f1_data.groupby('driver')['points'].sum().nlargest(10)\n",
        "    top_drivers.plot(kind='bar', ax=ax1, color='skyblue')\n",
        "    ax1.set_title('🏆 Top 10 Drivers by Total Points')\n",
        "    ax1.set_xlabel('Driver')\n",
        "    ax1.set_ylabel('Total Points')\n",
        "    ax1.tick_params(axis='x', rotation=45)\n",
        "\n",
        "    # 2. Team Performance Over Time\n",
        "    ax2 = axes[0, 1]\n",
        "    team_yearly = f1_data.groupby(['year', 'team'])['points'].sum().reset_index()\n",
        "    top_teams = f1_data.groupby('team')['points'].sum().nlargest(5).index\n",
        "\n",
        "    for team in top_teams:\n",
        "        team_data = team_yearly[team_yearly['team'] == team]\n",
        "        ax2.plot(team_data['year'], team_data['points'], marker='o', label=team, linewidth=2)\n",
        "\n",
        "    ax2.set_title('📈 Team Performance Evolution')\n",
        "    ax2.set_xlabel('Year')\n",
        "    ax2.set_ylabel('Points per Year')\n",
        "    ax2.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\n",
        "    ax2.grid(True, alpha=0.3)\n",
        "\n",
        "    # 3. Circuit Difficulty vs DNF Rate\n",
        "    ax3 = axes[1, 0]\n",
        "    circuit_stats = f1_data.groupby('circuit').agg({\n",
        "        'circuit_difficulty': 'first',\n",
        "        'dnf': 'mean'\n",
        "    }).reset_index()\n",
        "\n",
        "    scatter = ax3.scatter(circuit_stats['circuit_difficulty'],\n",
        "                         circuit_stats['dnf'] * 100,\n",
        "                         s=100, alpha=0.7, c='red')\n",
        "    ax3.set_title('🏁 Circuit Difficulty vs DNF Rate')\n",
        "    ax3.set_xlabel('Circuit Difficulty')\n",
        "    ax3.set_ylabel('DNF Rate (%)')\n",
        "    ax3.grid(True, alpha=0.3)\n",
        "\n",
        "    # Add circuit labels\n",
        "    for i, row in circuit_stats.iterrows():\n",
        "        ax3.annotate(row['circuit'],\n",
        "                    (row['circuit_difficulty'], row['dnf'] * 100),\n",
        "                    xytext=(5, 5), textcoords='offset points',\n",
        "                    fontsize=8, alpha=0.8)\n",
        "\n",
        "    # 4. Weather Impact on Performance\n",
        "    ax4 = axes[1, 1]\n",
        "    weather_performance = f1_data.groupby('weather')['avg_lap_time'].mean()\n",
        "    colors = ['gold', 'lightblue', 'darkblue', 'gray']\n",
        "    weather_performance.plot(kind='bar', ax=ax4, color=colors)\n",
        "    ax4.set_title('🌤️ Weather Impact on Lap Times')\n",
        "    ax4.set_xlabel('Weather Condition')\n",
        "    ax4.set_ylabel('Average Lap Time (s)')\n",
        "    ax4.tick_params(axis='x', rotation=45)\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "    # Additional championship simulation visualization\n",
        "    plt.figure(figsize=(14, 8))\n",
        "\n",
        "    # Championship standings simulation\n",
        "    recent_data = f1_data[f1_data['year'] >= 2020]\n",
        "    championship = recent_data.groupby('driver')['points'].sum().nlargest(10)\n",
        "\n",
        "    plt.subplot(1, 2, 1)\n",
        "    championship.plot(kind='barh', color='gold')\n",
        "    plt.title('🏆 Championship Standings (2020-2024)')\n",
        "    plt.xlabel('Total Points')\n",
        "    plt.grid(True, alpha=0.3)\n",
        "\n",
        "    # Lap time distribution\n",
        "    plt.subplot(1, 2, 2)\n",
        "    plt.hist(f1_data['avg_lap_time'], bins=30, alpha=0.7, color='green', edgecolor='black')\n",
        "    plt.title('⏱️ Lap Time Distribution')\n",
        "    plt.xlabel('Average Lap Time (s)')\n",
        "    plt.ylabel('Frequency')\n",
        "    plt.grid(True, alpha=0.3)\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "print(\"📊 Visualization functions ready!\")\n",
        "print(\"📋 Usage: create_f1_visualizations()\")"
      ],
      "metadata": {
        "trusted": true,
        "id": "M4Kpeg6T6YsT"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "code",
      "source": [
        "def run_f1_demo():\n",
        "    \"\"\"Run a comprehensive F1 analysis demo\"\"\"\n",
        "\n",
        "    print(\"🏎️\" + \"=\"*60 + \"🏎️\")\n",
        "    print(\"           F1 PREDICTOR COMPREHENSIVE DEMO\")\n",
        "    print(\"🏎️\" + \"=\"*60 + \"🏎️\")\n",
        "\n",
        "    # 1. Circuit Analysis Demo\n",
        "    print(\"\\n🏁 CIRCUIT ANALYSIS DEMO:\")\n",
        "    print(\"-\" * 30)\n",
        "    analyze_circuit('Monaco')\n",
        "\n",
        "    print(\"\\n\" + \"=\"*60)\n",
        "\n",
        "    # 2. Driver Battle Demo\n",
        "    print(\"\\n🥊 DRIVER BATTLE DEMO:\")\n",
        "    print(\"-\" * 25)\n",
        "    driver_battle_analysis('Max Verstappen', 'Lewis Hamilton', 2024)\n",
        "\n",
        "    print(\"\\n\" + \"=\"*60)\n",
        "\n",
        "    # 3. Race Prediction Demo\n",
        "    print(\"\\n🔮 RACE PREDICTION DEMO:\")\n",
        "    print(\"-\" * 27)\n",
        "    predictions = predict_race_results('Silverstone', 2024, 'Dry')\n",
        "\n",
        "    print(\"\\n\" + \"=\"*60)\n",
        "\n",
        "    # 4. ML Prediction Demo\n",
        "    print(\"\\n🤖 ML PREDICTION DEMO:\")\n",
        "    print(\"-\" * 24)\n",
        "    ml_predictions = ml_race_prediction('Spa-Francorchamps', 2024, 'Light Rain')\n",
        "\n",
        "    print(\"\\n\" + \"=\"*60)\n",
        "\n",
        "    # 5. Feature Importance\n",
        "    print(\"\\n🎯 FEATURE IMPORTANCE ANALYSIS:\")\n",
        "    print(\"-\" * 35)\n",
        "    print(feature_importance.head(8))\n",
        "\n",
        "    print(\"\\n🏁 Demo completed! All functions are working correctly.\")\n",
        "    print(\"📊 You can now use any of the analysis functions individually.\")\n",
        "\n",
        "print(\"🎬 Demo function ready!\")\n",
        "print(\"📋 Usage: run_f1_demo()\")"
      ],
      "metadata": {
        "trusted": true,
        "id": "cm4wo6II6YsU"
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 🎯 How to Use This F1 Predictor\n",
        "\n",
        "### 🔧 Available Functions:\n",
        "\n",
        "1. **Circuit Analysis**: `analyze_circuit('Monaco')`\n",
        "   - Shows circuit graphics and historical performance data\n",
        "\n",
        "2. **Driver Battles**: `driver_battle_analysis('Max Verstappen', 'Lewis Hamilton', 2024)`\n",
        "   - Head-to-head driver comparisons with detailed stats\n",
        "\n",
        "3. **Race Predictions**: `predict_race_results('Silverstone', 2024, 'Dry')`\n",
        "   - Advanced race outcome predictions with multiple factors\n",
        "\n",
        "4. **ML Predictions**: `ml_race_prediction('Spa-Francorchamps', 2024, 'Light Rain')`\n",
        "   - Machine learning powered predictions\n",
        "\n",
        "5. **Visualizations**: `create_f1_visualizations()`\n",
        "   - Comprehensive data visualization dashboard\n",
        "\n",
        "6. **Full Demo**: `run_f1_demo()`\n",
        "   - Complete demonstration of all features\n",
        "\n",
        "### 📊 Available Circuits:\n",
        "Monaco, Silverstone, Spa-Francorchamps, Monza, Suzuka, Interlagos, Austin, Bahrain\n",
        "\n",
        "### 🌤️ Weather Options:\n",
        "Dry, Light Rain, Heavy Rain, Overcast\n",
        "\n",
        "### 🏎️ Current Era Drivers (2024):\n",
        "Max Verstappen, Lewis Hamilton, Charles Leclerc, Lando Norris, George Russell, Carlos Sainz Jr, Sergio Perez, Fernando Alonso, Oscar Piastri, Alexander Albon"
      ],
      "metadata": {
        "id": "WySIP6XU6YsU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Run the comprehensive demo\n",
        "print(\"🚀 Starting F1 Predictor Demo...\")\n",
        "print(\"This will showcase all the features of the F1 predictor!\")\n",
        "print(\"\\n\" + \"🏁\" * 20)\n",
        "\n",
        "run_f1_demo()\n",
        "\n",
        "print(\"\\n\" + \"🏁\" * 20)\n",
        "print(\"✅ F1 Predictor is ready for use!\")\n",
        "print(\"🎯 Try any of the functions mentioned above!\")"
      ],
      "metadata": {
        "trusted": true,
        "id": "WcersVbi6YsV"
      },
      "outputs": [],
      "execution_count": null
    }
  ]
}